{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMoYgQT/JjqWO/YXk4YvgQO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GeraldHufana/58010-DSAA/blob/main/Long%20Quiz%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CeJD5EIhPGLs",
        "outputId": "a6c62307-71ff-4eb2-f719-531c455afec9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Create a python or C++ program that appends each character of your full name and displays each character in reverse order\n",
        "\n",
        "Full_Name = \"HUFANA GERALD F.\"\n",
        "\n",
        "Name_Character = []\n",
        "F_name = \"GERALD F.\"\n",
        "Name_Character += (\"HUFANA, \")\n",
        "\n",
        "for Full_name in reversed(Name_Character):\n",
        "  print()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Using the set of positive whole numbers from 1 to 10, create a python or C++ program that displays if it is prime or composite.\n",
        "class prime_or_composite:\n",
        "\n",
        " def is_prime(int):\n",
        "    if int <= 1:\n",
        "        return False\n",
        "    if int <= 3:\n",
        "        return True\n",
        "    if int % 2 == 0 or int % 3 == 0:\n",
        "        return False\n",
        "    i = 5\n",
        "    while i * i <= int:\n",
        "        if int % i == 0 or int % (i + 2) == 0:\n",
        "            return False\n",
        "        i += 6\n",
        "    return True\n",
        "\n",
        "for int in range(1, 11):\n",
        "\n",
        "  if is_prime(int):\n",
        "    print(f\"{int} is Prime_Num  :(\" )\n",
        "  else:\n",
        "    print(f\"{int} is Composite_Num :)\" )\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tjijQlueTvqC",
        "outputId": "06dbcdf4-d11f-495f-e298-f290a23cd85b"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 is Composite_Num :)\n",
            "2 is Prime_Num  :(\n",
            "3 is Prime_Num  :(\n",
            "4 is Composite_Num :)\n",
            "5 is Prime_Num  :(\n",
            "6 is Composite_Num :)\n",
            "7 is Prime_Num  :(\n",
            "8 is Composite_Num :)\n",
            "9 is Composite_Num :)\n",
            "10 is Composite_Num :)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-7XdCnQwWGQS"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}